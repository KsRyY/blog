[
    {
        "ref": "https://konomo.now.sh/blog/improve-zsh-launch-speed/",
        "title": "加快 Zsh 启动速度",
        "section": "blog",
        "date" : "2019.08.30",
        "body": " Bash是个好shell，但是我选择Zsh，因为Zsh可配置性强，但可配置性强带来的后果就是你的Zsh可能会花上好几秒去启动，这样非常烦人，所以我现在就来分享一些加快Zsh启动速度的技巧\n选择好的插件管理器 好的插件管理器是非常必要的，否则你可能会被缓慢的加载速度逼疯，这是比较推荐的插件管理器的列表：\n oh-my-zsh: 插件管理器我首推Oh My Zsh，尽管我现在并没有用它，但是它配置简单，而且自带大量实用插件，非常适合快速配置，但是注意不要加载太多插件，否则还是会拖慢启动速度。 antibody: 这是我最爱的一个插件管理器，它可能是所有插件管理器中最快的那一个了，在静态加载模式下几乎拥有着和手动加载一样的速度，而且能从几乎任何地方加载插件。  我并不推荐的管理器列表：\n antigen: 它太臃肿，速度又慢的可怕，所以请不要使用它。 zplug: zplug有着强大的功能，友好的用户界面，这两点我承认，但是它的加载速度实在令人难以置信。它需要花大致两倍于antibody的时间加载一个插件，所以也请不要使用它。  控制插件量 这没什么好讲的，不管是哪一种插件管理器，或者是原生加载方式，只要你加载太多插件，启动速度一定快不到哪里去。\n挑选插件 某些插件会严重拖慢启动速度. 如果你用了速度快的插件管理器或者使用原生加载, 没有加载太多插件却依然卡顿的话那么你也许需要自行测试一下是哪个插件导致的. 找到问题以后, 如果这个插件并非必须, 那么你可以考虑不要加载它. 如果这个插件提供的功能是必需的, 那么你可以寻找一个快速的替代品.\n懒加载命令行工具（Lazy-Loading） 这是一个比较高级的技巧. 像rbenv, pyenv这种需要在shell加载时初始化的工具可能会严重拖慢启动速度, 一种折中的解决方案就是Lazy-Loading. 下面是一个例子:\nrbenv() { eval \u0026quot;$(command rbenv init -)\u0026quot; rbenv \u0026quot;$@\u0026quot; }  上面这段代码定义了一个函数, 覆盖了已有的rbenv命令. 这个函数的大致作用是先调用eval \u0026quot;$(command rbenv init -)\u0026quot;来初始化rbenv, 然后在把所有的参数原封不动地传给rbenv. 在你没有用到rbenv之前都不会执行初始化的任务, 因此也不会影响启动速度.\n但是, 上面的方法有一点小小的问题, 就是你在调用被该工具管理的命令(例如, 对于rbenv, ruby命令)时不会加载该工具, 也执行不了那个工具管理的指定命令(例如, 当懒加载rbenv时, 不调用rbenv前调用ruby会执行系统安装的版本, 而不是rbenv管理的版本). 这个问题目前我还没有解决方案.\n这就需要你做选择了, 更快的加载速度还是更方便的管理.\n测试加载速度 for i in $(seq 1 10); do /usr/bin/time -f \u0026quot;real %e system %S user %U\u0026quot; zsh -i -c exit; done  上面是一行用来测试zsh加载速度的命令, 总共执行十次, 显示每次的用时. 如果你想看看更详细的调试信息, 试试下面的命令:\nzsh -i -c -x exit  参考  Speeding Up My Zsh Load - Carlos Alexandro Becker  "
    }
,
    {
        "ref": "https://konomo.now.sh/blog/cargo-local-mirror/",
        "title": "构建一个本地rust crates镜像",
        "section": "blog",
        "date" : "2019.08.15",
        "body": " 众所周知, rust的官方包管理器源在国内有点小问题, 轻则下载速度缓慢, 重则连接超时, 而唯一在国内提供rust crates镜像源的中科大源也时常挂掉, 所以你也许需要构建一个本地源以备不时之需.\n搭建步骤  将github上的rust crates官方镜像源克隆到本地(目前大小100MB多, 还可以接受)\ngit clone https://github.com/rust/crates.io-index.git  切换到本地目录\ncd crates.io-index  打开这个目录下的config.json文件, 然后将其替换为以下内容:\n{ \u0026quot;dl\u0026quot;: \u0026quot;https://crates-io.proxy.ustclug.org/api/v1/crates\u0026quot;, \u0026quot;api\u0026quot;: \u0026quot;https://crates.io/\u0026quot; }  这边用了中科大搭的一个rust crates API反向代理, 这玩意实测可用\n 这样镜像本身就搭建好了\n  注: 这个镜像更新速度贼快, 而且拉取一般情况下耗时不会太长, 所以你可以没事就git pull origin拉一下\n配置cargo 接下来就轮到配置cargo了, 将以下内容写入你的~/.cargo/config文件中(此处路径为使用rustup安装的默认路径):\n[source.crates-io] replace-with = 'local' [source.local] registry = \u0026quot;file://这儿替换成你的镜像目录的绝对路径\u0026quot;  如果你配置过中科大源, 那你的配置文件应该看上去像这样:\n[source.crates-io] replace-with = 'ustc' [source.ustc] registry = \u0026quot;https://mirrors.ustc.edu.cn/crates.io-index\u0026quot;  在source.ustc项下面加一行 replace-with = 'local' 然后把下面的东西粘贴到文件末尾就行了:\n[source.local] registry = \u0026quot;file://这儿替换成你的镜像目录的绝对路径\u0026quot;  附: 关于Windows下镜像目录的URL 如果Windows下你的镜像目录的绝对路径是C:/crates.io-index, 那么镜像目录的URL是file:///c/crates.io-index\n"
    }
]
